from Crypto.Util.number import GCD, inverse

N = 2140324650240744961264423072839333563008614715144755017797754920881418023447140136643345519095804679610992851872470914587687396261921557363047454770520805119056493106687691590019759405693457452230589325976697471681738069364894699871578494975937497937
e = 65537
c = 1344660735017677639632142046979720252191953395569833330678231528232858931639578235437318094350294777833221090256720019123074275027372192022789503672675988445867056189730344219731380119186607584731556605775212457754668073156025453544258802463933462067

p = 33372027594978156556226010605355114227940760344767554666784520987023841729210037080257448673296881877565718986258036932062711
q = 64135289477071580278790190170577389084825014742943447208116859632024532344630238623598752668347708737661925585694639798853367

phi = (p - 1) * (q - 1)
d = inverse(e, phi)
m = pow(c, d, N)
md = bytes.fromhex(f"{m:x}").decode()
print("Decrypted message:", md)