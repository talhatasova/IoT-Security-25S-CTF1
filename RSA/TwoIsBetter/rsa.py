from Crypto.Util.number import GCD, inverse


N1 = 4326773778352130595651996354635607373918925400351181478275973260473717117764121635120325074662212145094573246542527540148251973545448673642081138131890612706867838581407677896563514649635646611847691117189228478437950938558100157659826312707075228983833280506217100220580935454448558565395339577317115636780894479586648200415198656780332361271533500603811514404800988573478518830118464409065431128159487564857831422655638946498334005943944290159095713428925631763389306708184649837587126539109028011782706621336116748905587936891676831612022446576420199136146972037638732980089127072850580744797167217967795038775492930475212735542549392645070719168268188392058852401507204335115720812100338860191380421575964324551730097135325722646562276250152578648817003379271260997896939475211699126843796113883349997466806288362911490352113642388437130707820070335186821787321997365983490343982562910995851698392190534286470951683153321
e1 = 65537

N2 = 5566348182969947153440811438786426652241583471208224704192055179126930444030443819643843794130459844098060925710027178200472375253773305616079516111929967198705493867216831910250804384129878129892694160878114418411533362365215025590601870649149863086588987278803902616136904095530721239212125984788808424547745823013504559225391098958242022096319589225562666392894909402126121067537516830676165189488955529225300474129760848454675755915178446948267853471815547811221867946135962288727276809442564378905038442611932687568700319043634084141609522523351853697893422489710064900309987268775700375731368407017665295360536086576620824428065891023281079091432851241091552427338874983820545017524050519915265189860912795217019235098948795079686743859228319765791789917740979765271697618495004064846562836223463588946563965087987296820929500382927130101580661449475965094856416833403710882585698919659806596172912214859324739598370744912218945558296080515544561509753640015104985146018142063343691007324710815665314480524477413065341432640169282456826847880555703215593303725569960063642430608619144368954488187823788210560694531384669895454499401804197336950552088354496147504672148162714750297924292092147874814332587994393463693744534223849330085858455077866467466176885449187410982042499083583239135255111380654744011692121435796186403747804614866029299449434160529669568217188676563704406163
e2 = 65537

c1 = 3818008073710983689511982279122680265736887742840614421039157540774666615606515510359815312390098493304488234587800876679755736784413332802291547269651202984464006014228876817344249869224974423833298634779268858541961607805330965185365534854315320841540335198501383925667041787376130121363585064883887745715016489511334666941031152519582635549582486653984468207653591732546773798506028209664343817645938516321203818824083625343846180212052041528010188738910021941122855394933594502155222582359984618211611311344030934452184991330800621120191098525509141023772970412791381599819794420565483959337190799931897139990753332442836965245759237395472809204078735406043295764279410510889154747249605914658082909697322411862399826919214945807601050759558515543193896036837704995526044844864343958907466766342798366777186223904308615595995015886813762654096177327147300343460984257798360574353100297286558819306843994213335480728482079
c2 = 2519261483960136759272123936659585249802563808640981460299050435635317984668145626052254085274992358151384308727474589062226785330898011386251466591792466934737534432455682216600489697987382208333024169141623962964467177818331570515444296354197729111281653345254677309790975212120539104906651924572722764458923796952546472395945414972159124047655464966281681562427130834237406227079424421026658226286850499353949876763215767691546221395410895166442775898757244247807626597521237820869635703693413070340513313018449359209233199825277814725259759122290521022248881341376966727310553060958950227373881269740473727879441361020496050223658917452277687947101980284634129170970469883415859692303943435743831893806366610536448355476686805624449805523705645539636508201897203163290381919221258460652005410965159800413812773100926599246182421936722708251473401728736687223692499246941693726723692242560764956222431104750490325608509240760798673947511689660614397632925591918255698027771064003560413844210541980957163655710587489949685768075605744811272077037876008283066355335975000062074129354428484381018477192368140410542641479693233149557398270269293030297490540177767227846254673377941816030718393055660740277040281026382219630033107777601438059022223317572374355283123828244140974465492389188391608524582024587518082832066476930549981928617076053980392042763345838414173099279520794643891395

gcd = GCD(N1, N2)
if gcd == 1:
    print("N1 and N2 are coprime, no common factor found.")
else:
    print("Common factor found:", gcd)
    p = gcd
    q1 = N1 // p
    q2 = N2 // p

    phi1 = (p - 1) * (q1 - 1)
    phi2 = (p - 1) * (q2 - 1)

    d1 = inverse(e1, phi1)
    d2 = inverse(e2, phi2)

    m1 = pow(c1, d1, N1)
    m2 = pow(c2, d2, N2)

    assert m1 == m2, "Decrypted messages do not match!"

m = m1
md = bytes.fromhex(f"{m:x}").decode()
print("Decrypted message:", md)